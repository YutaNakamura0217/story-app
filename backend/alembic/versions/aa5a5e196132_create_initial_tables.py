"""create_initial_tables

Revision ID: aa5a5e196132
Revises: 
Create Date: 2025-05-30 12:47:31.412081

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'aa5a5e196132'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Define ENUM types using sqlalchemy.dialects.postgresql
user_tier_enum = postgresql.ENUM(
    'Free', 'Premium', 'Creator', 'Admin', name='user_tier_enum', create_type=False)
theme_category_enum = postgresql.ENUM(
    'self', 'others', 'world', 'thinking', name='theme_category_enum', create_type=False)
activity_type_enum = postgresql.ENUM('book_read_completed', 'question_answered', 'badge_earned',
                                     'note_taken', 'discussion_posted', name='activity_type_enum', create_type=False)


def upgrade() -> None:
    """Upgrade schema."""
    # Create ENUM types explicitly if they don't exist
    user_tier_enum.create(op.get_bind(), checkfirst=True)
    theme_category_enum.create(op.get_bind(), checkfirst=True)
    activity_type_enum.create(op.get_bind(), checkfirst=True)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('themes',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('description', sa.TEXT(), nullable=True),
                    sa.Column('icon_identifier', sa.String(
                        length=100), nullable=True),
                    sa.Column('age_range_display', sa.String(
                        length=50), nullable=True),
                    sa.Column('category', theme_category_enum, nullable=False),
                    sa.Column('cover_image_url', sa.TEXT(), nullable=True),
                    sa.Column('question_prompt', sa.TEXT(), nullable=True),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('book_pages',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('book_id', sa.UUID(), nullable=False),
                    sa.Column('page_number', sa.Integer(), nullable=False),
                    sa.Column('image_url', sa.TEXT(), nullable=False),
                    sa.Column('audio_url', sa.TEXT(), nullable=True),
                    sa.Column('question_id', sa.UUID(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['book_id'], ['books.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('book_themes',
                    sa.Column('book_id', sa.UUID(), nullable=False),
                    sa.Column('theme_id', sa.UUID(), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['book_id'], ['books.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['theme_id'], ['themes.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('book_id', 'theme_id')
                    )
    op.create_table('book_toc_items',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('book_id', sa.UUID(), nullable=False),
                    sa.Column('title', sa.String(length=255), nullable=False),
                    sa.Column('page_number', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['book_id'], ['books.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('children',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('age', sa.Integer(), nullable=False),
                    sa.Column('avatar_url', sa.TEXT(), nullable=True),
                    sa.Column('interests', postgresql.ARRAY(
                        sa.TEXT()), nullable=True),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('user_favorites',
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('book_id', sa.UUID(), nullable=False),
                    sa.Column('favorited_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['book_id'], ['books.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('user_id', 'book_id')
                    )
    op.create_table('user_settings',
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('notify_new_recommendations',
                              sa.Boolean(), nullable=False),
                    sa.Column('notify_child_progress_updates',
                              sa.Boolean(), nullable=False),
                    sa.Column('notify_platform_announcements',
                              sa.Boolean(), nullable=False),
                    sa.Column('notify_weekly_summary',
                              sa.Boolean(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('user_id')
                    )
    op.create_table('learning_activities',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('child_id', sa.UUID(), nullable=True),
                    sa.Column('activity_type',
                              activity_type_enum, nullable=False),
                    sa.Column('description', sa.TEXT(), nullable=False),
                    sa.Column('related_entity_id', sa.UUID(), nullable=True),
                    sa.Column('related_link', sa.TEXT(), nullable=True),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['child_id'], ['children.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('user_book_progress',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('child_id', sa.UUID(), nullable=True),
                    sa.Column('book_id', sa.UUID(), nullable=False),
                    sa.Column('current_page', sa.Integer(), nullable=False),
                    sa.Column('last_read_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['book_id'], ['books.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['child_id'], ['children.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('user_book_bookmarks',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('progress_id', sa.UUID(), nullable=False),
                    sa.Column('page_number', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['progress_id'], ['user_book_progress.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('user_book_notes',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('progress_id', sa.UUID(), nullable=False),
                    sa.Column('page_number', sa.Integer(), nullable=False),
                    sa.Column('text', sa.TEXT(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(timezone=True),
                              server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['progress_id'], ['user_book_progress.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.drop_table('book_categories')
    op.drop_table('categories')
    op.drop_table('favorites')
    op.add_column('books', sa.Column(
        'author_name', sa.String(length=255), nullable=True))
    op.add_column('books', sa.Column('cover_url', sa.TEXT(), nullable=True))
    op.add_column('books', sa.Column(
        'long_description', sa.TEXT(), nullable=True))
    op.add_column('books', sa.Column(
        'reading_time_minutes', sa.Integer(), nullable=True))
    op.add_column('books', sa.Column('age_min', sa.Integer(), nullable=True))
    op.add_column('books', sa.Column('age_max', sa.Integer(), nullable=True))
    op.add_column('books', sa.Column(
        'is_premium', sa.Boolean(), nullable=False))
    op.add_column('books', sa.Column('is_free', sa.Boolean(), nullable=False))
    op.add_column('books', sa.Column(
        'popularity_score', sa.Integer(), nullable=False))
    op.add_column('books', sa.Column(
        'total_pages', sa.Integer(), nullable=True))
    op.alter_column('books', 'title',
                    existing_type=sa.TEXT(),
                    type_=sa.String(length=255),
                    existing_nullable=False)
    op.alter_column('books', 'publisher',
                    existing_type=sa.TEXT(),
                    type_=sa.String(length=255),
                    existing_nullable=True)
    op.alter_column('books', 'created_at',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.TIMESTAMP(timezone=True),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('books', 'updated_at',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.TIMESTAMP(timezone=True),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.drop_column('books', 'language')
    op.drop_column('books', 'image_url')
    op.drop_column('books', 'pages')
    op.drop_column('books', 'author')
    op.drop_column('books', 'age_range')
    op.alter_column('reviews', 'text',
                    existing_type=sa.TEXT(),
                    nullable=True)
    op.alter_column('reviews', 'created_at',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.TIMESTAMP(timezone=True),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('reviews', 'updated_at',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.TIMESTAMP(timezone=True),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('reviews_book_id_fkey'),
                       'reviews', type_='foreignkey')
    op.drop_constraint(op.f('reviews_user_id_fkey'),
                       'reviews', type_='foreignkey')
    op.create_foreign_key(None, 'reviews', 'books', [
                          'book_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'reviews', 'users', [
                          'user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('reviews', 'likes')
    op.drop_column('reviews', 'review_date')
    op.drop_column('reviews', 'dislikes')
    op.add_column('users', sa.Column(
        'name', sa.String(length=255), nullable=False))
    op.add_column('users', sa.Column('avatar_url', sa.TEXT(), nullable=True))
    op.add_column('users', sa.Column('tier', user_tier_enum, nullable=False))
    op.add_column('users', sa.Column('introduction', sa.TEXT(), nullable=True))
    op.alter_column('users', 'email',
                    existing_type=sa.TEXT(),
                    type_=sa.String(length=255),
                    existing_nullable=False)
    op.alter_column('users', 'created_at',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.TIMESTAMP(timezone=True),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.TIMESTAMP(timezone=True),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.drop_column('users', 'username')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('username', sa.TEXT(),
                  autoincrement=False, nullable=False))
    op.create_unique_constraint(op.f('users_username_key'), 'users', [
                                'username'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'updated_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('users', 'email',
                    existing_type=sa.String(length=255),
                    type_=sa.TEXT(),
                    existing_nullable=False)
    op.drop_column('users', 'introduction')
    op.drop_column('users', 'tier')
    op.drop_column('users', 'avatar_url')
    op.drop_column('users', 'name')
    op.add_column('reviews', sa.Column('dislikes', sa.INTEGER(),
                  autoincrement=False, nullable=False))
    op.add_column('reviews', sa.Column('review_date', postgresql.TIMESTAMP(
    ), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('reviews', sa.Column('likes', sa.INTEGER(),
                  autoincrement=False, nullable=False))
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.create_foreign_key(op.f('reviews_user_id_fkey'),
                          'reviews', 'users', ['user_id'], ['id'])
    op.create_foreign_key(op.f('reviews_book_id_fkey'),
                          'reviews', 'books', ['book_id'], ['id'])
    op.alter_column('reviews', 'updated_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('reviews', 'created_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('reviews', 'text',
                    existing_type=sa.TEXT(),
                    nullable=False)
    op.add_column('books', sa.Column('age_range', sa.TEXT(),
                  autoincrement=False, nullable=True))
    op.add_column('books', sa.Column('author', sa.TEXT(),
                  autoincrement=False, nullable=True))
    op.add_column('books', sa.Column('pages', sa.INTEGER(),
                  autoincrement=False, nullable=True))
    op.add_column('books', sa.Column('image_url', sa.TEXT(),
                  autoincrement=False, nullable=True))
    op.add_column('books', sa.Column('language', sa.TEXT(),
                  autoincrement=False, nullable=True))
    op.alter_column('books', 'updated_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('books', 'created_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('books', 'publisher',
                    existing_type=sa.String(length=255),
                    type_=sa.TEXT(),
                    existing_nullable=True)
    op.alter_column('books', 'title',
                    existing_type=sa.String(length=255),
                    type_=sa.TEXT(),
                    existing_nullable=False)
    op.drop_column('books', 'total_pages')
    op.drop_column('books', 'popularity_score')
    op.drop_column('books', 'is_free')
    op.drop_column('books', 'is_premium')
    op.drop_column('books', 'age_max')
    op.drop_column('books', 'age_min')
    op.drop_column('books', 'reading_time_minutes')
    op.drop_column('books', 'long_description')
    op.drop_column('books', 'cover_url')
    op.drop_column('books', 'author_name')
    op.create_table('favorites',
                    sa.Column('user_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('book_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(
                        ['book_id'], ['books.id'], name=op.f('favorites_book_id_fkey')),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.id'], name=op.f('favorites_user_id_fkey')),
                    sa.PrimaryKeyConstraint('user_id', 'book_id',
                                            name=op.f('favorites_pkey'))
                    )
    op.create_table('categories',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.TEXT(),
                              autoincrement=False, nullable=False),
                    sa.Column('icon', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
                    sa.UniqueConstraint('name', name='categories_name_key', postgresql_include=[
                    ], postgresql_nulls_not_distinct=False),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('book_categories',
                    sa.Column('book_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('category_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name=op.f(
                        'book_categories_book_id_fkey')),
                    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f(
                        'book_categories_category_id_fkey')),
                    sa.PrimaryKeyConstraint('book_id', 'category_id',
                                            name=op.f('book_categories_pkey'))
                    )
    op.drop_table('user_book_notes')
    op.drop_table('user_book_bookmarks')
    op.drop_table('user_book_progress')
    op.drop_table('learning_activities')
    op.drop_table('user_settings')
    op.drop_table('user_favorites')
    op.drop_table('children')
    op.drop_table('book_toc_items')
    op.drop_table('book_themes')
    op.drop_table('book_pages')
    op.drop_table('themes')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('username', sa.TEXT(),
                  autoincrement=False, nullable=False))
    op.create_unique_constraint(op.f('users_username_key'), 'users', [
                                'username'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'updated_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('users', 'email',
                    existing_type=sa.String(length=255),
                    type_=sa.TEXT(),
                    existing_nullable=False)
    op.drop_column('users', 'introduction')
    op.drop_column('users', 'tier')
    op.drop_column('users', 'avatar_url')
    op.drop_column('users', 'name')
    op.add_column('reviews', sa.Column('dislikes', sa.INTEGER(),
                  autoincrement=False, nullable=False))
    op.add_column('reviews', sa.Column('review_date', postgresql.TIMESTAMP(
    ), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('reviews', sa.Column('likes', sa.INTEGER(),
                  autoincrement=False, nullable=False))
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.create_foreign_key(op.f('reviews_user_id_fkey'),
                          'reviews', 'users', ['user_id'], ['id'])
    op.create_foreign_key(op.f('reviews_book_id_fkey'),
                          'reviews', 'books', ['book_id'], ['id'])
    op.alter_column('reviews', 'updated_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('reviews', 'created_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('reviews', 'text',
                    existing_type=sa.TEXT(),
                    nullable=False)
    op.add_column('books', sa.Column('age_range', sa.TEXT(),
                  autoincrement=False, nullable=True))
    op.add_column('books', sa.Column('author', sa.TEXT(),
                  autoincrement=False, nullable=True))
    op.add_column('books', sa.Column('pages', sa.INTEGER(),
                  autoincrement=False, nullable=True))
    op.add_column('books', sa.Column('image_url', sa.TEXT(),
                  autoincrement=False, nullable=True))
    op.add_column('books', sa.Column('language', sa.TEXT(),
                  autoincrement=False, nullable=True))
    op.alter_column('books', 'updated_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('books', 'created_at',
                    existing_type=sa.TIMESTAMP(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=False,
                    existing_server_default=sa.text('now()'))
    op.alter_column('books', 'publisher',
                    existing_type=sa.String(length=255),
                    type_=sa.TEXT(),
                    existing_nullable=True)
    op.alter_column('books', 'title',
                    existing_type=sa.String(length=255),
                    type_=sa.TEXT(),
                    existing_nullable=False)
    op.drop_column('books', 'total_pages')
    op.drop_column('books', 'popularity_score')
    op.drop_column('books', 'is_free')
    op.drop_column('books', 'is_premium')
    op.drop_column('books', 'age_max')
    op.drop_column('books', 'age_min')
    op.drop_column('books', 'reading_time_minutes')
    op.drop_column('books', 'long_description')
    op.drop_column('books', 'cover_url')
    op.drop_column('books', 'author_name')
    op.create_table('favorites',
                    sa.Column('user_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('book_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(
                        ['book_id'], ['books.id'], name=op.f('favorites_book_id_fkey')),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.id'], name=op.f('favorites_user_id_fkey')),
                    sa.PrimaryKeyConstraint('user_id', 'book_id',
                                            name=op.f('favorites_pkey'))
                    )
    op.create_table('categories',
                    sa.Column('id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.TEXT(),
                              autoincrement=False, nullable=False),
                    sa.Column('icon', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
                    sa.UniqueConstraint('name', name='categories_name_key', postgresql_include=[
                    ], postgresql_nulls_not_distinct=False),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('book_categories',
                    sa.Column('book_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('category_id', sa.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name=op.f(
                        'book_categories_book_id_fkey')),
                    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f(
                        'book_categories_category_id_fkey')),
                    sa.PrimaryKeyConstraint('book_id', 'category_id',
                                            name=op.f('book_categories_pkey'))
                    )
    op.drop_table('user_book_notes')
    op.drop_table('user_book_bookmarks')
    op.drop_table('user_book_progress')
    op.drop_table('learning_activities')
    op.drop_table('user_settings')
    op.drop_table('user_favorites')
    op.drop_table('children')
    op.drop_table('book_toc_items')
    op.drop_table('book_themes')
    op.drop_table('book_pages')
    op.drop_table('themes')
    # ### end Alembic commands ###

    # Drop ENUM types explicitly if they were created
    activity_type_enum.drop(op.get_bind(), checkfirst=True)
    theme_category_enum.drop(op.get_bind(), checkfirst=True)
    user_tier_enum.drop(op.get_bind(), checkfirst=True)
